/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*/
-->begin
using System.Collections;
using System.Text;
using LLVMSharp.Compiler.Ast;
using LLVMSharp.Compiler.CocoR;
using System;
using System.Diagnostics;

-->namespace

public class Parser :IParser {
-->constants
	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

-->declarations

	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n , scanner.FileName);
		  errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		  errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }
-->pragmas
			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
-->productions

	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
-->parseRoot
	}
	
	static readonly bool[,] set = {
-->initialization
	};

	#region IParser Members

    public IToken Token
    {
        [DebuggerStepThrough]
        get { return t; }
    }

    public IToken LookAhead
    {
        [DebuggerStepThrough]
        get { return la; }
    }

    public IScanner Scanner
    {
        [DebuggerStepThrough]
        get { return scanner; }
    }

    #endregion
} // end Parser



public class Errors {
	public int count = 0;                                    // number of errors detected
   
    // Use this to store list of errors instead of just writing to the textwriter.
    public ErrorList errorList = new ErrorList();
     
	public void SynErr (int line, int col, int n, string fileName) {
		string s;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		errorList.Add(new ErrorInfo(ErrorType.SyntaxError, s ,line , col, fileName));
		count++;
	}

	public void SemErr (int line, int col, string s) {
		errorList.Add(new ErrorInfo(ErrorType.SymenticError, s ,line , col));
		count++;
	}

	public void SemErr (int line, int col, string s,string fileName) {
		errorList.Add(new ErrorInfo(ErrorType.SymenticError, s ,line , col, fileName));
		count++;
	}
	
	public void SemErr (string s) {
		//todo
		//errorStream.WriteLine(s);
		count++;
	}
	
	public void Warning (int line, int col, string s) {
		errorList.Add(new ErrorInfo(ErrorType.Warning, s ,line , col));
	}

	public void Warning (int line, int col, string s,string fileName) {
		errorList.Add(new ErrorInfo(ErrorType.Warning, s ,line , col, fileName));
	}
	
	public void Warning(string s) {
	    //todo
		//errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}

public enum ErrorType{
    SyntaxError,
    SymenticError,
    Warning
}

public class ErrorInfo{

    public ErrorType type;
    public string message;
    public int line;
    public int col;
	public string fileName;
    
    public ErrorInfo(){}
    
    public ErrorInfo(ErrorType type,string message,int line,int col){
        this.type=type;
        this.message=message;
        this.line=line;
        this.col=col;
    }
    
	public ErrorInfo(ErrorType type,string message,int line,int col,string fileName)
		: this(type,message,line,col)
	{
		this.fileName=fileName;
	}
}

public delegate void ErrorHandler(object o, ErrorArgs e);

public class ErrorArgs: EventArgs{
    public readonly ErrorInfo errorInfo;
    public ErrorArgs(ErrorInfo errorInfo){
        this.errorInfo = errorInfo;
    }
}

public class ErrorList : System.Collections.ArrayList
{
    public override int Add(object value)
    {
        if(!(value is ErrorInfo))
            throw new FatalError("value added to errorlist must be of type ErrorInfo.");
        int rt = base.Add(value);
        if(ErrorAdded!=null)
            ErrorAdded(this,new ErrorArgs((ErrorInfo)value));
        return rt;
    }

    public event ErrorHandler ErrorAdded;
    
    public ErrorList() { }
}